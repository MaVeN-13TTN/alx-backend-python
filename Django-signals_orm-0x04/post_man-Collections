{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "Messaging App API",
		"description": "Complete API testing collection for the Django Messaging App with JWT authentication, pagination, and filtering",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "1. Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user_id');",
									"    pm.expect(jsonData).to.have.property('username');",
									"    pm.expect(jsonData).to.have.property('email');",
									"});",
									"",
									"// Store user_id for later use",
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set('user_id', jsonData.user_id);",
									"    pm.environment.set('username', jsonData.username);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser1\",\n    \"email\": \"testuser1@example.com\",\n    \"password\": \"securepassword123\",\n    \"first_name\": \"Test\",\n    \"last_name\": \"User One\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"register",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Login (Get JWT Token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has tokens\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access');",
									"    pm.expect(jsonData).to.have.property('refresh');",
									"});",
									"",
									"// Store tokens for authentication",
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set('access_token', jsonData.access);",
									"    pm.environment.set('refresh_token', jsonData.refresh);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser1\",\n    \"password\": \"securepassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/token/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"token",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has new access token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access');",
									"});",
									"",
									"// Update access token",
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set('access_token', jsonData.access);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/token/refresh/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"token",
								"refresh",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Get User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has user profile data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user_id');",
									"    pm.expect(jsonData).to.have.property('username');",
									"    pm.expect(jsonData).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/profile/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"profile",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Test Unauthorized Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 (Unauthorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response indicates authentication required\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/conversations/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"conversations",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "1. Create Second User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Store second user's ID",
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set('user2_id', jsonData.user_id);",
									"    pm.environment.set('user2_username', jsonData.username);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser2\",\n    \"email\": \"testuser2@example.com\",\n    \"password\": \"securepassword123\",\n    \"first_name\": \"Test\",\n    \"last_name\": \"User Two\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"register",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "2. List All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has pagination\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData).to.have.property('results');",
									"    pm.expect(jsonData).to.have.property('page_size');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Filter Users by Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Filtered results contain search term\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.results && jsonData.results.length > 0) {",
									"        jsonData.results.forEach(function(user) {",
									"            pm.expect(user.username.toLowerCase()).to.include('testuser');",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/?username=testuser",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								""
							],
							"query": [
								{
									"key": "username",
									"value": "testuser"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Conversations",
			"item": [
				{
					"name": "1. Create Conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has conversation data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('conversation_id');",
									"    pm.expect(jsonData).to.have.property('participants');",
									"    pm.expect(jsonData).to.have.property('created_at');",
									"});",
									"",
									"// Store conversation ID for later use",
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set('conversation_id', jsonData.conversation_id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"participant_ids\": [\"{{user2_id}}\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/conversations/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"conversations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "2. List User Conversations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has pagination\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData).to.have.property('results');",
									"    pm.expect(jsonData).to.have.property('page_size');",
									"});",
									"",
									"pm.test(\"User is participant in returned conversations\", function () {",
									"    var jsonData = pm.response.json();",
									"    var currentUserId = pm.environment.get('user_id');",
									"    if (jsonData.results && jsonData.results.length > 0) {",
									"        jsonData.results.forEach(function(conversation) {",
									"            var isParticipant = conversation.participants.some(function(participant) {",
									"                return participant.user_id === currentUserId;",
									"            });",
									"            pm.expect(isParticipant).to.be.true;",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/conversations/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"conversations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Get Conversation Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has detailed conversation data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('conversation_id');",
									"    pm.expect(jsonData).to.have.property('participants');",
									"    pm.expect(jsonData).to.have.property('messages');",
									"    pm.expect(jsonData).to.have.property('message_count');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/conversations/{{conversation_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"conversations",
								"{{conversation_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Add Participant to Conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Participant was added\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('participants');",
									"    pm.expect(jsonData.participants.length).to.be.at.least(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": \"{{user2_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/conversations/{{conversation_id}}/add_participant/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"conversations",
								"{{conversation_id}}",
								"add_participant",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Filter Conversations by Participant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Filtered results contain specified participant\", function () {",
									"    var jsonData = pm.response.json();",
									"    var searchUserId = pm.environment.get('user2_id');",
									"    if (jsonData.results && jsonData.results.length > 0) {",
									"        jsonData.results.forEach(function(conversation) {",
									"            var hasParticipant = conversation.participants.some(function(participant) {",
									"                return participant.user_id === searchUserId;",
									"            });",
									"            pm.expect(hasParticipant).to.be.true;",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/conversations/?participant={{user2_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"conversations",
								""
							],
							"query": [
								{
									"key": "participant",
									"value": "{{user2_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Messages",
			"item": [
				{
					"name": "1. Send Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has message data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message_id');",
									"    pm.expect(jsonData).to.have.property('message_body');",
									"    pm.expect(jsonData).to.have.property('sender');",
									"    pm.expect(jsonData).to.have.property('conversation');",
									"    pm.expect(jsonData).to.have.property('sent_at');",
									"});",
									"",
									"pm.test(\"Sender is current user\", function () {",
									"    var jsonData = pm.response.json();",
									"    var currentUserId = pm.environment.get('user_id');",
									"    pm.expect(jsonData.sender.user_id).to.equal(currentUserId);",
									"});",
									"",
									"// Store message ID for later use",
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set('message_id', jsonData.message_id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message_body\": \"Hello! This is a test message from the Postman collection.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/messages/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Send Another Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message_body\": \"Testing pagination and filtering features!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/messages/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "3. List Messages (Paginated)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has pagination (20 per page)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData).to.have.property('results');",
									"    pm.expect(jsonData).to.have.property('page_size');",
									"    pm.expect(jsonData.page_size).to.equal(20);",
									"});",
									"",
									"pm.test(\"User can only see messages from their conversations\", function () {",
									"    var jsonData = pm.response.json();",
									"    var currentUserId = pm.environment.get('user_id');",
									"    if (jsonData.results && jsonData.results.length > 0) {",
									"        jsonData.results.forEach(function(message) {",
									"            // Either user is the sender or a participant in the conversation",
									"            var isValidAccess = message.sender.user_id === currentUserId ||",
									"                               message.conversation.participants.some(function(p) {",
									"                                   return p.user_id === currentUserId;",
									"                               });",
									"            pm.expect(isValidAccess).to.be.true;",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Test Custom Page Size",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Custom page size is applied\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.page_size).to.equal(5);",
									"    pm.expect(jsonData.results.length).to.be.at.most(5);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/?page_size=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							],
							"query": [
								{
									"key": "page_size",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Filter Messages by Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Filtered results contain search term\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.results && jsonData.results.length > 0) {",
									"        jsonData.results.forEach(function(message) {",
									"            pm.expect(message.message_body.toLowerCase()).to.include('test');",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/?message_body=test",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							],
							"query": [
								{
									"key": "message_body",
									"value": "test"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Filter Messages by Sender",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All messages are from specified sender\", function () {",
									"    var jsonData = pm.response.json();",
									"    var searchUsername = pm.environment.get('username');",
									"    if (jsonData.results && jsonData.results.length > 0) {",
									"        jsonData.results.forEach(function(message) {",
									"            pm.expect(message.sender.username).to.include(searchUsername);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/?sender_username={{username}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							],
							"query": [
								{
									"key": "sender_username",
									"value": "{{username}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "7. Filter Messages by Date Range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Messages are within date range\", function () {",
									"    var jsonData = pm.response.json();",
									"    var today = new Date().toISOString().split('T')[0];",
									"    if (jsonData.results && jsonData.results.length > 0) {",
									"        jsonData.results.forEach(function(message) {",
									"            var messageDate = new Date(message.sent_at).toISOString().split('T')[0];",
									"            pm.expect(messageDate).to.equal(today);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/?sent_date={{$isoTimestamp}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							],
							"query": [
								{
									"key": "sent_date",
									"value": "{{$isoTimestamp}}",
									"description": "This will be replaced with current date"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "8. Filter Messages by Conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All messages are from specified conversation\", function () {",
									"    var jsonData = pm.response.json();",
									"    var conversationId = pm.environment.get('conversation_id');",
									"    if (jsonData.results && jsonData.results.length > 0) {",
									"        jsonData.results.forEach(function(message) {",
									"            pm.expect(message.conversation.conversation_id).to.equal(conversationId);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/?conversation={{conversation_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							],
							"query": [
								{
									"key": "conversation",
									"value": "{{conversation_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "9. Get Messages from Conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has paginated messages\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData).to.have.property('results');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/conversations/{{conversation_id}}/messages/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"conversations",
								"{{conversation_id}}",
								"messages",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "10. Get My Messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All messages are from current user\", function () {",
									"    var jsonData = pm.response.json();",
									"    var currentUserId = pm.environment.get('user_id');",
									"    if (jsonData.results && jsonData.results.length > 0) {",
									"        jsonData.results.forEach(function(message) {",
									"            pm.expect(message.sender.user_id).to.equal(currentUserId);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/my_messages/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								"my_messages",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Security Tests",
			"item": [
				{
					"name": "1. Access Other User's Messages (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 or 404 (Access Denied)\", function () {",
									"    pm.expect([403, 404]).to.include(pm.response.code);",
									"});",
									"",
									"pm.test(\"Response indicates access denied\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/non-existent-message-id/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								"non-existent-message-id",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Access Non-Participant Conversation (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 or 404 (Access Denied)\", function () {",
									"    pm.expect([403, 404]).to.include(pm.response.code);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/conversations/non-existent-conversation-id/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"conversations",
								"non-existent-conversation-id",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Send Message with Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 (Unauthorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response indicates invalid token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid-token-here"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message_body\": \"This should fail!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/messages/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Advanced Filtering Tests",
			"item": [
				{
					"name": "1. Combine Multiple Filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Results match all filter criteria\", function () {",
									"    var jsonData = pm.response.json();",
									"    var searchUsername = pm.environment.get('username');",
									"    if (jsonData.results && jsonData.results.length > 0) {",
									"        jsonData.results.forEach(function(message) {",
									"            pm.expect(message.sender.username).to.include(searchUsername);",
									"            pm.expect(message.message_body.toLowerCase()).to.include('test');",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/?sender_username={{username}}&message_body=test&page_size=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							],
							"query": [
								{
									"key": "sender_username",
									"value": "{{username}}"
								},
								{
									"key": "message_body",
									"value": "test"
								},
								{
									"key": "page_size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Search with Ordering",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Results are ordered by sent_at descending\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.results && jsonData.results.length > 1) {",
									"        for (var i = 0; i < jsonData.results.length - 1; i++) {",
									"            var current = new Date(jsonData.results[i].sent_at);",
									"            var next = new Date(jsonData.results[i + 1].sent_at);",
									"            pm.expect(current.getTime()).to.be.at.least(next.getTime());",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/?ordering=-sent_at&search=test",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							],
							"query": [
								{
									"key": "ordering",
									"value": "-sent_at"
								},
								{
									"key": "search",
									"value": "test"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-update date variables",
					"pm.environment.set('current_date', new Date().toISOString().split('T')[0]);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
}
